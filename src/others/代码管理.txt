本指南
名词
story：需求
bug：分为测试版本 bug 和 正式版本 bug
hotfix：正式版本 bug 的修复
WBS：work-break structure 工作分解结构，工作的最小单元

需求开发：
1. 需求分解：将分配给自己的工作进行分解要求每个WBS之间解耦，做到互不影响。
	- 需求story：（一般）以story工单为最小 WBS
	- hotfix：以 bug 工单为最小单位（正式版本的 bug 单）
2. 建立代码分支：以分解后的 WBS 建立 需求开发分支/hotfix 修复分支

例如：2024-01-30 需要发布版本，发布内容有以下3部分
	- 需求工单-20240101
	- 需求工单20240102
	- 线上 bug 工单20240101
开发人员以 master 分支，分别建立 feature/login_module，feature/index_module，hotfix/20240101并链接到对应的工单
	- feature：需求分支名前缀
	- hotfix：线上 bug 分支名前缀
	- 分支名详情尽量描述需求特征，如无法描述可以以工单号命名
3. 开发：开发代码规范参考。。。
4. 本地测试：开发完成后，两个分支代码分别进行本地测试
5. 联调:建立联调分支进行联调，integrate/login_module&index_module&hotifx
	- 可以以 master 为基础，也可以以某以分支为基础合并代码，结果一样
	- 代码审查过程在后面完成，此过程可不需要进行代码审查
	- 如只有一个开发分支，则命名为 integrate/login_module，不要直接使用开发分支名，避免临时增加的需求或者 bug 的情况
5. 联调完成：转为测试分支
6. 测试：测试期间
	- 测试人员根据测试用例，并提 bug 工单
	- 开发人员接到 bug 工单，需在各自开发分支进行修改
	- 修改完成并合并入 integrate 联调分支，并重新进行部署
	- 禁止在 integrate 分支直接修改bug（某些全部配置项除外）
7. 发布前准备：测试完成在计划发布前
	- 以 master 为基础按照发布日期建立发布分支 release/20240130
	- 提交 integrate 合并到 release 分支的请求
	- 进行代码审查
	- 审查完成合入 release 分支
8. 进行其他发布准备工作
	- 发布计划表填写
9. 开发人员部署 release 分支代码到测试服务器，对 feature 和 hotfix 进行一次测试，并保留测试结果证据（一般为截图）
	- 如测试发现问题，需告知测试人员，并按照（5）中步骤进行修改
10. 测试完成无问题，进行代码打包
	- release 发布包：打包 release/20240130
	- rollback 回滚包：打包 master
11. 此前所有阶段出现某个需求不能如期交付的情况，则根据情况重新建立 integrate分支和  release 分支，并继续
12. 发布
13. 回归测试，并保留测试证据
14. 正式上线第二天，合并 release 分支到 master
15. 一周后，可以酌情删除开发分支、integrate分支、release分支
